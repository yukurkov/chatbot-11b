import logging
import os
import json
from datetime import datetime, timedelta
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
REPORT_PAGES, REPORT_EXERCISE = range(2)
JSON_DIR = "/mount/dir"
JSON_FILE = Path(JSON_DIR) / "user_data.json"

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(JSON_DIR, exist_ok=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏."""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("üìñ –£–∫–∞–∑–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data='report_pages')],
        [InlineKeyboardButton("üèãÔ∏è –í–≤–µ—Å—Ç–∏ –º–∏–Ω—É—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data='report_exercise')],
        [InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data='show_results')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
    )
    return REPORT_PAGES

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'report_pages':
        await query.edit_message_text(text="üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:")
        return REPORT_PAGES
    elif query.data == 'report_exercise':
        await query.edit_message_text(text="‚è± –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:")
        return REPORT_EXERCISE
    elif query.data == 'show_results':
        return await show_weekly_results(query)

async def show_weekly_results(query) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."""
    user_id = query.from_user.id
    today = datetime.now()
    start_of_week = today - timedelta(days=today.weekday())  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    
    try:
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        await query.edit_message_text("üìä –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        return ConversationHandler.END

    user_data = data.get(str(user_id), {})
    pages = user_data.get("pages", [])
    exercise = user_data.get("exercise_minutes", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    weekly_pages = [
        entry for entry in pages 
        if datetime.strptime(entry["date"], "%Y-%m-%d %H:%M:%S") >= start_of_week
    ]
    weekly_exercise = [
        entry for entry in exercise 
        if datetime.strptime(entry["date"], "%Y-%m-%d %H:%M:%S") >= start_of_week
    ]

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    last_pages = weekly_pages[-1]["value"] if weekly_pages else 0
    last_exercise = weekly_exercise[-1]["value"] if weekly_exercise else 0

    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if last_pages == 0 and last_exercise == 0:
        message = "üìä –í—ã –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é."
    else:
        is_good = last_pages >= 200 and last_exercise >= 120
        message = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {last_pages}\n"
            f"üèãÔ∏è –ú–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {last_exercise}\n\n"
            f"{'‚úÖ –ú–æ–ª–æ–¥—á–∏–∫! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!' if is_good else '‚û°Ô∏è –ú–æ–∂–Ω–æ –ª—É—á—à–µ! –°—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –∏—Ö!'}"
        )

    await query.edit_message_text(text=message)
    return ConversationHandler.END

async def save_pages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ JSON."""
    return await save_data(update, "pages", "üìñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {} —Å—Ç—Ä–∞–Ω–∏—Ü.")

async def save_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–Ω—É—Ç—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ JSON."""
    return await save_data(update, "exercise_minutes", "üèãÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {} –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")

async def save_data(update: Update, field: str, success_message: str) -> int:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    try:
        value = int(update.message.text)
        if value < 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ –∫—É—Ä–∏ —Å—é–¥–∞!**.")
        return REPORT_PAGES if field == "pages" else REPORT_EXERCISE

    user_id = update.effective_user.id
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    try:
        with open(JSON_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}

    if str(user_id) not in data:
        data[str(user_id)] = {"pages": [], "exercise_minutes": []}
    
    data[str(user_id)][field].append({
        "date": current_date,
        "value": value,
    })

    with open(JSON_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

    await update.message.reply_text(success_message.format(value))
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥."""
    await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(os.environ.get("TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REPORT_PAGES: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_pages)],
            REPORT_EXERCISE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_exercise)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: None))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
