import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, CallbackContext,
    MessageHandler, Filters
)
from datetime import datetime, time
import pytz
import json
import os
from collections import defaultdict

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
CHAT_ID = 'YOUR_GROUP_CHAT_ID'  # ID –æ–±—â–µ–≥–æ —á–∞—Ç–∞
ADMIN_ID = 'YOUR_ADMIN_ID'  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

# –ñ–µ—Å—Ç–∫–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
PARTICIPANTS = {
    'user1_id': {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 1', 'pages_goal': 50, 'workout_goal': 5},
    'user2_id': {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 2', 'pages_goal': 50, 'workout_goal': 5},
    'user3_id': {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 3', 'pages_goal': 50, 'workout_goal': 5},
    'user4_id': {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 4', 'pages_goal': 50, 'workout_goal': 5},
    'user5_id': {'name': '–£—á–∞—Å—Ç–Ω–∏–∫ 5', 'pages_goal': 50, 'workout_goal': 5},
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'weekly_data.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {'weekly_results': []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
def ask_participants(context: CallbackContext):
    data = load_data()
    current_week = datetime.now().strftime("%Y-%U")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    if data.get('weekly_results') and data['weekly_results'][-1].get('week') == current_week:
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    if not data.get('weekly_results') or data['weekly_results'][-1].get('week') != current_week:
        data['weekly_results'].append({
            'week': current_week,
            'participants': {}
        })
        save_data(data)
    
    for user_id in PARTICIPANTS:
        try:
            keyboard = [
                [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data=f"input_{user_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            context.bot.send_message(
                chat_id=user_id,
                text=f"–ü—Ä–∏–≤–µ—Ç, {PARTICIPANTS[user_id]['name']}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
                     f"1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü\n"
                     f"2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                     f"–¶–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é: {PARTICIPANTS[user_id]['pages_goal']} —Å—Ç—Ä–∞–Ω–∏—Ü, {PARTICIPANTS[user_id]['workout_goal']} —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {PARTICIPANTS[user_id]['name']}: {e}"
            )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
def send_reminders(context: CallbackContext):
    data = load_data()
    current_week = datetime.now().strftime("%Y-%U")
    
    if not data.get('weekly_results') or data['weekly_results'][-1].get('week') != current_week:
        return
    
    current_week_data = data['weekly_results'][-1]
    
    for user_id in PARTICIPANTS:
        if str(user_id) not in current_week_data['participants']:
            try:
                context.bot.send_message(
                    chat_id=user_id,
                    text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ–±—â–∏–π —á–∞—Ç
def publish_results(context: CallbackContext):
    data = load_data()
    current_week = datetime.now().strftime("%Y-%U")
    
    if not data.get('weekly_results') or data['weekly_results'][-1].get('week') != current_week:
        return
    
    current_week_data = data['weekly_results'][-1]
    results = []
    
    for user_id, user_data in PARTICIPANTS.items():
        user_results = current_week_data['participants'].get(str(user_id), {})
        pages = user_results.get('pages', 0)
        workout = user_results.get('workout', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∞–ª—å
        pages_goal = user_data['pages_goal']
        workout_goal = user_data['workout_goal']
        
        pages_percent = pages / pages_goal
        workout_percent = workout / workout_goal
        
        if pages_percent >= 1 and workout_percent >= 1:
            medal = "ü•á"
        elif pages_percent >= 0.5 and workout_percent >= 0.5:
            medal = "ü•à"
        elif pages_percent >= 0.5 or workout_percent >= 0.5:
            medal = "ü•â"
        else:
            medal = ""
        
        results.append(
            f"{user_data['name']}: {pages} —Å—Ç—Ä. ({pages_percent:.0%}), "
            f"{workout} —á. ({workout_percent:.0%}) {medal}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å
    stats_message = "\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–µ–¥–µ–ª—å:\n"
    weeks_to_show = data['weekly_results'][-5:]
    
    for week_data in weeks_to_show:
        week_name = week_data['week']
        week_participants = week_data.get('participants', {})
        total_pages = sum(p.get('pages', 0) for p in week_participants.values())
        total_workout = sum(p.get('workout', 0) for p in week_participants.values())
        
        stats_message += (
            f"–ù–µ–¥–µ–ª—è {week_name}: "
            f"–í—Å–µ–≥–æ {total_pages} —Å—Ç—Ä., {total_workout} —á. —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        )
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
    if len(data['weekly_results']) >= 2:
        prev_week = data['weekly_results'][-2]
        prev_pages = sum(p.get('pages', 0) for p in prev_week.get('participants', {}).values())
        prev_workout = sum(p.get('workout', 0) for p in prev_week.get('participants', {}).values())
        
        current_pages = sum(p.get('pages', 0) for p in current_week_data.get('participants', {}).values())
        current_workout = sum(p.get('workout', 0) for p in current_week_data.get('participants', {}).values())
        
        pages_diff = current_pages - prev_pages
        workout_diff = current_workout - prev_workout
        
        trend = "üìà –£–ª—É—á—à–µ–Ω–∏–µ" if (pages_diff >= 0 and workout_diff >= 0) else "üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ"
        
        stats_message += (
            f"\n–¢—Ä–µ–Ω–¥ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π: {trend}\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü—ã: {'+' if pages_diff >=0 else ''}{pages_diff}\n"
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {'+' if workout_diff >=0 else ''}{workout_diff}"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
    try:
        context.bot.send_message(
            chat_id=CHAT_ID,
            text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n" + "\n".join(results) + stats_message
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Ç: {e}")
        context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —á–∞—Ç: {e}"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    user_id = query.data.split('_')[1]
    if str(update.effective_user.id) != user_id:
        query.edit_message_text(text="–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!")
        return
    
    query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Å—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä: 45 3.5")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def handle_results(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    
    if user_id not in PARTICIPANTS:
        update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        return
    
    try:
        pages, workout = map(float, update.message.text.split())
    except:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Å—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä: 45 3.5")
        return
    
    data = load_data()
    current_week = datetime.now().strftime("%Y-%U")
    
    if not data.get('weekly_results') or data['weekly_results'][-1].get('week') != current_week:
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ñ–¥–∏—Ç–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    data['weekly_results'][-1]['participants'][user_id] = {
        'pages': pages,
        'workout': workout,
        'timestamp': datetime.now().isoformat()
    }
    save_data(data)
    
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def force_publish(update: Update, context: CallbackContext):
    if str(update.effective_user.id) != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    publish_results(context)
    update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")

def main():
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("publish", force_publish))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_results))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    tz = pytz.timezone('Europe/Moscow')
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º - –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    updater.job_queue.run_daily(
        ask_participants,
        time=time(hour=10, minute=0, tzinfo=tz),
        days=(6,)  # 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    )
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 17:00 - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    updater.job_queue.run_daily(
        send_reminders,
        time=time(hour=17, minute=0, tzinfo=tz),
        days=(6,)
    )
    
    # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00 - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    updater.job_queue.run_daily(
        publish_results,
        time=time(hour=20, minute=0, tzinfo=tz),
        days=(6,)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
